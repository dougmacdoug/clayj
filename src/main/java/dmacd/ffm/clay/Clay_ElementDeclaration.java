// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_ElementDeclaration {
 *     Clay_ElementId id;
 *     Clay_LayoutConfig layout;
 *     Clay_Color backgroundColor;
 *     Clay_CornerRadius cornerRadius;
 *     Clay_AspectRatioElementConfig aspectRatio;
 *     Clay_ImageElementConfig image;
 *     Clay_FloatingElementConfig floating;
 *     Clay_CustomElementConfig custom;
 *     Clay_ClipElementConfig clip;
 *     Clay_BorderElementConfig border;
 *     void *userData;
 * }
 * }
 */
public class Clay_ElementDeclaration {

    Clay_ElementDeclaration() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clay_ElementId.layout().withName("id"),
        Clay_LayoutConfig.layout().withName("layout"),
        Clay_Color.layout().withName("backgroundColor"),
        Clay_CornerRadius.layout().withName("cornerRadius"),
        Clay_AspectRatioElementConfig.layout().withName("aspectRatio"),
        MemoryLayout.paddingLayout(4),
        Clay_ImageElementConfig.layout().withName("image"),
        Clay_FloatingElementConfig.layout().withName("floating"),
        MemoryLayout.paddingLayout(4),
        Clay_CustomElementConfig.layout().withName("custom"),
        Clay_ClipElementConfig.layout().withName("clip"),
        Clay_BorderElementConfig.layout().withName("border"),
        ClayFFM.C_POINTER.withName("userData")
    ).withName("Clay_ElementDeclaration");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_ElementId id
     * }
     */
    public static final GroupLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_ElementId id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_ElementId id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.asSlice(id$OFFSET, id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_ElementId id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, id$OFFSET, id$LAYOUT.byteSize());
    }

    private static final GroupLayout layout$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("layout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_LayoutConfig layout
     * }
     */
    public static final GroupLayout layout$layout() {
        return layout$LAYOUT;
    }

    private static final long layout$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_LayoutConfig layout
     * }
     */
    public static final long layout$offset() {
        return layout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_LayoutConfig layout
     * }
     */
    public static MemorySegment layout(MemorySegment struct) {
        return struct.asSlice(layout$OFFSET, layout$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_LayoutConfig layout
     * }
     */
    public static void layout(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, layout$OFFSET, layout$LAYOUT.byteSize());
    }

    private static final GroupLayout backgroundColor$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("backgroundColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Color backgroundColor
     * }
     */
    public static final GroupLayout backgroundColor$layout() {
        return backgroundColor$LAYOUT;
    }

    private static final long backgroundColor$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Color backgroundColor
     * }
     */
    public static final long backgroundColor$offset() {
        return backgroundColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Color backgroundColor
     * }
     */
    public static MemorySegment backgroundColor(MemorySegment struct) {
        return struct.asSlice(backgroundColor$OFFSET, backgroundColor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Color backgroundColor
     * }
     */
    public static void backgroundColor(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, backgroundColor$OFFSET, backgroundColor$LAYOUT.byteSize());
    }

    private static final GroupLayout cornerRadius$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cornerRadius"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_CornerRadius cornerRadius
     * }
     */
    public static final GroupLayout cornerRadius$layout() {
        return cornerRadius$LAYOUT;
    }

    private static final long cornerRadius$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_CornerRadius cornerRadius
     * }
     */
    public static final long cornerRadius$offset() {
        return cornerRadius$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_CornerRadius cornerRadius
     * }
     */
    public static MemorySegment cornerRadius(MemorySegment struct) {
        return struct.asSlice(cornerRadius$OFFSET, cornerRadius$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_CornerRadius cornerRadius
     * }
     */
    public static void cornerRadius(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cornerRadius$OFFSET, cornerRadius$LAYOUT.byteSize());
    }

    private static final GroupLayout aspectRatio$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("aspectRatio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_AspectRatioElementConfig aspectRatio
     * }
     */
    public static final GroupLayout aspectRatio$layout() {
        return aspectRatio$LAYOUT;
    }

    private static final long aspectRatio$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_AspectRatioElementConfig aspectRatio
     * }
     */
    public static final long aspectRatio$offset() {
        return aspectRatio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_AspectRatioElementConfig aspectRatio
     * }
     */
    public static MemorySegment aspectRatio(MemorySegment struct) {
        return struct.asSlice(aspectRatio$OFFSET, aspectRatio$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_AspectRatioElementConfig aspectRatio
     * }
     */
    public static void aspectRatio(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, aspectRatio$OFFSET, aspectRatio$LAYOUT.byteSize());
    }

    private static final GroupLayout image$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_ImageElementConfig image
     * }
     */
    public static final GroupLayout image$layout() {
        return image$LAYOUT;
    }

    private static final long image$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_ImageElementConfig image
     * }
     */
    public static final long image$offset() {
        return image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_ImageElementConfig image
     * }
     */
    public static MemorySegment image(MemorySegment struct) {
        return struct.asSlice(image$OFFSET, image$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_ImageElementConfig image
     * }
     */
    public static void image(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, image$OFFSET, image$LAYOUT.byteSize());
    }

    private static final GroupLayout floating$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("floating"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_FloatingElementConfig floating
     * }
     */
    public static final GroupLayout floating$layout() {
        return floating$LAYOUT;
    }

    private static final long floating$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_FloatingElementConfig floating
     * }
     */
    public static final long floating$offset() {
        return floating$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_FloatingElementConfig floating
     * }
     */
    public static MemorySegment floating(MemorySegment struct) {
        return struct.asSlice(floating$OFFSET, floating$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_FloatingElementConfig floating
     * }
     */
    public static void floating(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, floating$OFFSET, floating$LAYOUT.byteSize());
    }

    private static final GroupLayout custom$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("custom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_CustomElementConfig custom
     * }
     */
    public static final GroupLayout custom$layout() {
        return custom$LAYOUT;
    }

    private static final long custom$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_CustomElementConfig custom
     * }
     */
    public static final long custom$offset() {
        return custom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_CustomElementConfig custom
     * }
     */
    public static MemorySegment custom(MemorySegment struct) {
        return struct.asSlice(custom$OFFSET, custom$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_CustomElementConfig custom
     * }
     */
    public static void custom(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, custom$OFFSET, custom$LAYOUT.byteSize());
    }

    private static final GroupLayout clip$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("clip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_ClipElementConfig clip
     * }
     */
    public static final GroupLayout clip$layout() {
        return clip$LAYOUT;
    }

    private static final long clip$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_ClipElementConfig clip
     * }
     */
    public static final long clip$offset() {
        return clip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_ClipElementConfig clip
     * }
     */
    public static MemorySegment clip(MemorySegment struct) {
        return struct.asSlice(clip$OFFSET, clip$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_ClipElementConfig clip
     * }
     */
    public static void clip(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, clip$OFFSET, clip$LAYOUT.byteSize());
    }

    private static final GroupLayout border$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("border"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_BorderElementConfig border
     * }
     */
    public static final GroupLayout border$layout() {
        return border$LAYOUT;
    }

    private static final long border$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_BorderElementConfig border
     * }
     */
    public static final long border$offset() {
        return border$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_BorderElementConfig border
     * }
     */
    public static MemorySegment border(MemorySegment struct) {
        return struct.asSlice(border$OFFSET, border$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_BorderElementConfig border
     * }
     */
    public static void border(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, border$OFFSET, border$LAYOUT.byteSize());
    }

    private static final AddressLayout userData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final AddressLayout userData$layout() {
        return userData$LAYOUT;
    }

    private static final long userData$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final long userData$offset() {
        return userData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static MemorySegment userData(MemorySegment struct) {
        return struct.get(userData$LAYOUT, userData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static void userData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userData$LAYOUT, userData$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

