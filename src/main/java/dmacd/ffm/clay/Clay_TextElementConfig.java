// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_TextElementConfig {
 *     void *userData;
 *     Clay_Color textColor;
 *     uint16_t fontId;
 *     uint16_t fontSize;
 *     uint16_t letterSpacing;
 *     uint16_t lineHeight;
 *     Clay_TextElementConfigWrapMode wrapMode;
 *     Clay_TextAlignment textAlignment;
 * }
 * }
 */
public class Clay_TextElementConfig {

    Clay_TextElementConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ClayFFM.C_POINTER.withName("userData"),
        Clay_Color.layout().withName("textColor"),
        ClayFFM.C_SHORT.withName("fontId"),
        ClayFFM.C_SHORT.withName("fontSize"),
        ClayFFM.C_SHORT.withName("letterSpacing"),
        ClayFFM.C_SHORT.withName("lineHeight"),
        ClayFFM.C_INT.withName("wrapMode"),
        ClayFFM.C_INT.withName("textAlignment")
    ).withName("Clay_TextElementConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout userData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final AddressLayout userData$layout() {
        return userData$LAYOUT;
    }

    private static final long userData$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final long userData$offset() {
        return userData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static MemorySegment userData(MemorySegment struct) {
        return struct.get(userData$LAYOUT, userData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static void userData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userData$LAYOUT, userData$OFFSET, fieldValue);
    }

    private static final GroupLayout textColor$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("textColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Color textColor
     * }
     */
    public static final GroupLayout textColor$layout() {
        return textColor$LAYOUT;
    }

    private static final long textColor$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Color textColor
     * }
     */
    public static final long textColor$offset() {
        return textColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Color textColor
     * }
     */
    public static MemorySegment textColor(MemorySegment struct) {
        return struct.asSlice(textColor$OFFSET, textColor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Color textColor
     * }
     */
    public static void textColor(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, textColor$OFFSET, textColor$LAYOUT.byteSize());
    }

    private static final OfShort fontId$LAYOUT = (OfShort)$LAYOUT.select(groupElement("fontId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t fontId
     * }
     */
    public static final OfShort fontId$layout() {
        return fontId$LAYOUT;
    }

    private static final long fontId$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t fontId
     * }
     */
    public static final long fontId$offset() {
        return fontId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t fontId
     * }
     */
    public static short fontId(MemorySegment struct) {
        return struct.get(fontId$LAYOUT, fontId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t fontId
     * }
     */
    public static void fontId(MemorySegment struct, short fieldValue) {
        struct.set(fontId$LAYOUT, fontId$OFFSET, fieldValue);
    }

    private static final OfShort fontSize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("fontSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t fontSize
     * }
     */
    public static final OfShort fontSize$layout() {
        return fontSize$LAYOUT;
    }

    private static final long fontSize$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t fontSize
     * }
     */
    public static final long fontSize$offset() {
        return fontSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t fontSize
     * }
     */
    public static short fontSize(MemorySegment struct) {
        return struct.get(fontSize$LAYOUT, fontSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t fontSize
     * }
     */
    public static void fontSize(MemorySegment struct, short fieldValue) {
        struct.set(fontSize$LAYOUT, fontSize$OFFSET, fieldValue);
    }

    private static final OfShort letterSpacing$LAYOUT = (OfShort)$LAYOUT.select(groupElement("letterSpacing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t letterSpacing
     * }
     */
    public static final OfShort letterSpacing$layout() {
        return letterSpacing$LAYOUT;
    }

    private static final long letterSpacing$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t letterSpacing
     * }
     */
    public static final long letterSpacing$offset() {
        return letterSpacing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t letterSpacing
     * }
     */
    public static short letterSpacing(MemorySegment struct) {
        return struct.get(letterSpacing$LAYOUT, letterSpacing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t letterSpacing
     * }
     */
    public static void letterSpacing(MemorySegment struct, short fieldValue) {
        struct.set(letterSpacing$LAYOUT, letterSpacing$OFFSET, fieldValue);
    }

    private static final OfShort lineHeight$LAYOUT = (OfShort)$LAYOUT.select(groupElement("lineHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t lineHeight
     * }
     */
    public static final OfShort lineHeight$layout() {
        return lineHeight$LAYOUT;
    }

    private static final long lineHeight$OFFSET = 30;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t lineHeight
     * }
     */
    public static final long lineHeight$offset() {
        return lineHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t lineHeight
     * }
     */
    public static short lineHeight(MemorySegment struct) {
        return struct.get(lineHeight$LAYOUT, lineHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t lineHeight
     * }
     */
    public static void lineHeight(MemorySegment struct, short fieldValue) {
        struct.set(lineHeight$LAYOUT, lineHeight$OFFSET, fieldValue);
    }

    private static final OfInt wrapMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wrapMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_TextElementConfigWrapMode wrapMode
     * }
     */
    public static final OfInt wrapMode$layout() {
        return wrapMode$LAYOUT;
    }

    private static final long wrapMode$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_TextElementConfigWrapMode wrapMode
     * }
     */
    public static final long wrapMode$offset() {
        return wrapMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_TextElementConfigWrapMode wrapMode
     * }
     */
    public static int wrapMode(MemorySegment struct) {
        return struct.get(wrapMode$LAYOUT, wrapMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_TextElementConfigWrapMode wrapMode
     * }
     */
    public static void wrapMode(MemorySegment struct, int fieldValue) {
        struct.set(wrapMode$LAYOUT, wrapMode$OFFSET, fieldValue);
    }

    private static final OfInt textAlignment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("textAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_TextAlignment textAlignment
     * }
     */
    public static final OfInt textAlignment$layout() {
        return textAlignment$LAYOUT;
    }

    private static final long textAlignment$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_TextAlignment textAlignment
     * }
     */
    public static final long textAlignment$offset() {
        return textAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_TextAlignment textAlignment
     * }
     */
    public static int textAlignment(MemorySegment struct) {
        return struct.get(textAlignment$LAYOUT, textAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_TextAlignment textAlignment
     * }
     */
    public static void textAlignment(MemorySegment struct, int fieldValue) {
        struct.set(textAlignment$LAYOUT, textAlignment$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

