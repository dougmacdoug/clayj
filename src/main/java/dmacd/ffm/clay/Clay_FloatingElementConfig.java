// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_FloatingElementConfig {
 *     Clay_Vector2 offset;
 *     Clay_Dimensions expand;
 *     uint32_t parentId;
 *     int16_t zIndex;
 *     Clay_FloatingAttachPoints attachPoints;
 *     Clay_PointerCaptureMode pointerCaptureMode;
 *     Clay_FloatingAttachToElement attachTo;
 *     Clay_FloatingClipToElement clipTo;
 * }
 * }
 */
public class Clay_FloatingElementConfig {

    Clay_FloatingElementConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clay_Vector2.layout().withName("offset"),
        Clay_Dimensions.layout().withName("expand"),
        ClayFFM.C_INT.withName("parentId"),
        ClayFFM.C_SHORT.withName("zIndex"),
        MemoryLayout.paddingLayout(2),
        Clay_FloatingAttachPoints.layout().withName("attachPoints"),
        ClayFFM.C_INT.withName("pointerCaptureMode"),
        ClayFFM.C_INT.withName("attachTo"),
        ClayFFM.C_INT.withName("clipTo")
    ).withName("Clay_FloatingElementConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout offset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Vector2 offset
     * }
     */
    public static final GroupLayout offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Vector2 offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Vector2 offset
     * }
     */
    public static MemorySegment offset(MemorySegment struct) {
        return struct.asSlice(offset$OFFSET, offset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Vector2 offset
     * }
     */
    public static void offset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, offset$OFFSET, offset$LAYOUT.byteSize());
    }

    private static final GroupLayout expand$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("expand"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Dimensions expand
     * }
     */
    public static final GroupLayout expand$layout() {
        return expand$LAYOUT;
    }

    private static final long expand$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Dimensions expand
     * }
     */
    public static final long expand$offset() {
        return expand$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Dimensions expand
     * }
     */
    public static MemorySegment expand(MemorySegment struct) {
        return struct.asSlice(expand$OFFSET, expand$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Dimensions expand
     * }
     */
    public static void expand(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, expand$OFFSET, expand$LAYOUT.byteSize());
    }

    private static final OfInt parentId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("parentId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t parentId
     * }
     */
    public static final OfInt parentId$layout() {
        return parentId$LAYOUT;
    }

    private static final long parentId$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t parentId
     * }
     */
    public static final long parentId$offset() {
        return parentId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t parentId
     * }
     */
    public static int parentId(MemorySegment struct) {
        return struct.get(parentId$LAYOUT, parentId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t parentId
     * }
     */
    public static void parentId(MemorySegment struct, int fieldValue) {
        struct.set(parentId$LAYOUT, parentId$OFFSET, fieldValue);
    }

    private static final OfShort zIndex$LAYOUT = (OfShort)$LAYOUT.select(groupElement("zIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t zIndex
     * }
     */
    public static final OfShort zIndex$layout() {
        return zIndex$LAYOUT;
    }

    private static final long zIndex$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t zIndex
     * }
     */
    public static final long zIndex$offset() {
        return zIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t zIndex
     * }
     */
    public static short zIndex(MemorySegment struct) {
        return struct.get(zIndex$LAYOUT, zIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t zIndex
     * }
     */
    public static void zIndex(MemorySegment struct, short fieldValue) {
        struct.set(zIndex$LAYOUT, zIndex$OFFSET, fieldValue);
    }

    private static final GroupLayout attachPoints$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("attachPoints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_FloatingAttachPoints attachPoints
     * }
     */
    public static final GroupLayout attachPoints$layout() {
        return attachPoints$LAYOUT;
    }

    private static final long attachPoints$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_FloatingAttachPoints attachPoints
     * }
     */
    public static final long attachPoints$offset() {
        return attachPoints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_FloatingAttachPoints attachPoints
     * }
     */
    public static MemorySegment attachPoints(MemorySegment struct) {
        return struct.asSlice(attachPoints$OFFSET, attachPoints$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_FloatingAttachPoints attachPoints
     * }
     */
    public static void attachPoints(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, attachPoints$OFFSET, attachPoints$LAYOUT.byteSize());
    }

    private static final OfInt pointerCaptureMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pointerCaptureMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_PointerCaptureMode pointerCaptureMode
     * }
     */
    public static final OfInt pointerCaptureMode$layout() {
        return pointerCaptureMode$LAYOUT;
    }

    private static final long pointerCaptureMode$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_PointerCaptureMode pointerCaptureMode
     * }
     */
    public static final long pointerCaptureMode$offset() {
        return pointerCaptureMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_PointerCaptureMode pointerCaptureMode
     * }
     */
    public static int pointerCaptureMode(MemorySegment struct) {
        return struct.get(pointerCaptureMode$LAYOUT, pointerCaptureMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_PointerCaptureMode pointerCaptureMode
     * }
     */
    public static void pointerCaptureMode(MemorySegment struct, int fieldValue) {
        struct.set(pointerCaptureMode$LAYOUT, pointerCaptureMode$OFFSET, fieldValue);
    }

    private static final OfInt attachTo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("attachTo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_FloatingAttachToElement attachTo
     * }
     */
    public static final OfInt attachTo$layout() {
        return attachTo$LAYOUT;
    }

    private static final long attachTo$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_FloatingAttachToElement attachTo
     * }
     */
    public static final long attachTo$offset() {
        return attachTo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_FloatingAttachToElement attachTo
     * }
     */
    public static int attachTo(MemorySegment struct) {
        return struct.get(attachTo$LAYOUT, attachTo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_FloatingAttachToElement attachTo
     * }
     */
    public static void attachTo(MemorySegment struct, int fieldValue) {
        struct.set(attachTo$LAYOUT, attachTo$OFFSET, fieldValue);
    }

    private static final OfInt clipTo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("clipTo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_FloatingClipToElement clipTo
     * }
     */
    public static final OfInt clipTo$layout() {
        return clipTo$LAYOUT;
    }

    private static final long clipTo$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_FloatingClipToElement clipTo
     * }
     */
    public static final long clipTo$offset() {
        return clipTo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_FloatingClipToElement clipTo
     * }
     */
    public static int clipTo(MemorySegment struct) {
        return struct.get(clipTo$LAYOUT, clipTo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_FloatingClipToElement clipTo
     * }
     */
    public static void clipTo(MemorySegment struct, int fieldValue) {
        struct.set(clipTo$LAYOUT, clipTo$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

