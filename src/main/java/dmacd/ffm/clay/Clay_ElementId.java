// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_ElementId {
 *     uint32_t id;
 *     uint32_t offset;
 *     uint32_t baseId;
 *     Clay_String stringId;
 * }
 * }
 */
public class Clay_ElementId {

    Clay_ElementId() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ClayFFM.C_INT.withName("id"),
        ClayFFM.C_INT.withName("offset"),
        ClayFFM.C_INT.withName("baseId"),
        MemoryLayout.paddingLayout(4),
        Clay_String.layout().withName("stringId")
    ).withName("Clay_ElementId");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t id
     * }
     */
    public static final OfInt id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t id
     * }
     */
    public static int id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt baseId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("baseId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t baseId
     * }
     */
    public static final OfInt baseId$layout() {
        return baseId$LAYOUT;
    }

    private static final long baseId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t baseId
     * }
     */
    public static final long baseId$offset() {
        return baseId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t baseId
     * }
     */
    public static int baseId(MemorySegment struct) {
        return struct.get(baseId$LAYOUT, baseId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t baseId
     * }
     */
    public static void baseId(MemorySegment struct, int fieldValue) {
        struct.set(baseId$LAYOUT, baseId$OFFSET, fieldValue);
    }

    private static final GroupLayout stringId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("stringId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_String stringId
     * }
     */
    public static final GroupLayout stringId$layout() {
        return stringId$LAYOUT;
    }

    private static final long stringId$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_String stringId
     * }
     */
    public static final long stringId$offset() {
        return stringId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_String stringId
     * }
     */
    public static MemorySegment stringId(MemorySegment struct) {
        return struct.asSlice(stringId$OFFSET, stringId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_String stringId
     * }
     */
    public static void stringId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stringId$OFFSET, stringId$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

