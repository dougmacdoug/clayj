// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class ClayFFM {

    ClayFFM() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    private static final int CLAY__SIZING_TYPE_FIT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY__SIZING_TYPE_FIT = 0
     * }
     */
    public static int CLAY__SIZING_TYPE_FIT() {
        return CLAY__SIZING_TYPE_FIT;
    }
    private static final int CLAY__SIZING_TYPE_GROW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY__SIZING_TYPE_GROW = 1
     * }
     */
    public static int CLAY__SIZING_TYPE_GROW() {
        return CLAY__SIZING_TYPE_GROW;
    }
    private static final int CLAY__SIZING_TYPE_PERCENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY__SIZING_TYPE_PERCENT = 2
     * }
     */
    public static int CLAY__SIZING_TYPE_PERCENT() {
        return CLAY__SIZING_TYPE_PERCENT;
    }
    private static final int CLAY__SIZING_TYPE_FIXED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY__SIZING_TYPE_FIXED = 3
     * }
     */
    public static int CLAY__SIZING_TYPE_FIXED() {
        return CLAY__SIZING_TYPE_FIXED;
    }
    private static final int CLAY_ATTACH_POINT_LEFT_TOP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_ATTACH_POINT_LEFT_TOP = 0
     * }
     */
    public static int CLAY_ATTACH_POINT_LEFT_TOP() {
        return CLAY_ATTACH_POINT_LEFT_TOP;
    }
    private static final int CLAY_ATTACH_POINT_LEFT_CENTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_ATTACH_POINT_LEFT_CENTER = 1
     * }
     */
    public static int CLAY_ATTACH_POINT_LEFT_CENTER() {
        return CLAY_ATTACH_POINT_LEFT_CENTER;
    }
    private static final int CLAY_ATTACH_POINT_LEFT_BOTTOM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_ATTACH_POINT_LEFT_BOTTOM = 2
     * }
     */
    public static int CLAY_ATTACH_POINT_LEFT_BOTTOM() {
        return CLAY_ATTACH_POINT_LEFT_BOTTOM;
    }
    private static final int CLAY_ATTACH_POINT_CENTER_TOP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_ATTACH_POINT_CENTER_TOP = 3
     * }
     */
    public static int CLAY_ATTACH_POINT_CENTER_TOP() {
        return CLAY_ATTACH_POINT_CENTER_TOP;
    }
    private static final int CLAY_ATTACH_POINT_CENTER_CENTER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_ATTACH_POINT_CENTER_CENTER = 4
     * }
     */
    public static int CLAY_ATTACH_POINT_CENTER_CENTER() {
        return CLAY_ATTACH_POINT_CENTER_CENTER;
    }
    private static final int CLAY_ATTACH_POINT_CENTER_BOTTOM = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_ATTACH_POINT_CENTER_BOTTOM = 5
     * }
     */
    public static int CLAY_ATTACH_POINT_CENTER_BOTTOM() {
        return CLAY_ATTACH_POINT_CENTER_BOTTOM;
    }
    private static final int CLAY_ATTACH_POINT_RIGHT_TOP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_ATTACH_POINT_RIGHT_TOP = 6
     * }
     */
    public static int CLAY_ATTACH_POINT_RIGHT_TOP() {
        return CLAY_ATTACH_POINT_RIGHT_TOP;
    }
    private static final int CLAY_ATTACH_POINT_RIGHT_CENTER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_ATTACH_POINT_RIGHT_CENTER = 7
     * }
     */
    public static int CLAY_ATTACH_POINT_RIGHT_CENTER() {
        return CLAY_ATTACH_POINT_RIGHT_CENTER;
    }
    private static final int CLAY_ATTACH_POINT_RIGHT_BOTTOM = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_ATTACH_POINT_RIGHT_BOTTOM = 8
     * }
     */
    public static int CLAY_ATTACH_POINT_RIGHT_BOTTOM() {
        return CLAY_ATTACH_POINT_RIGHT_BOTTOM;
    }
    private static final int CLAY_RENDER_COMMAND_TYPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_RENDER_COMMAND_TYPE_NONE = 0
     * }
     */
    public static int CLAY_RENDER_COMMAND_TYPE_NONE() {
        return CLAY_RENDER_COMMAND_TYPE_NONE;
    }
    private static final int CLAY_RENDER_COMMAND_TYPE_RECTANGLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_RENDER_COMMAND_TYPE_RECTANGLE = 1
     * }
     */
    public static int CLAY_RENDER_COMMAND_TYPE_RECTANGLE() {
        return CLAY_RENDER_COMMAND_TYPE_RECTANGLE;
    }
    private static final int CLAY_RENDER_COMMAND_TYPE_BORDER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_RENDER_COMMAND_TYPE_BORDER = 2
     * }
     */
    public static int CLAY_RENDER_COMMAND_TYPE_BORDER() {
        return CLAY_RENDER_COMMAND_TYPE_BORDER;
    }
    private static final int CLAY_RENDER_COMMAND_TYPE_TEXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_RENDER_COMMAND_TYPE_TEXT = 3
     * }
     */
    public static int CLAY_RENDER_COMMAND_TYPE_TEXT() {
        return CLAY_RENDER_COMMAND_TYPE_TEXT;
    }
    private static final int CLAY_RENDER_COMMAND_TYPE_IMAGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_RENDER_COMMAND_TYPE_IMAGE = 4
     * }
     */
    public static int CLAY_RENDER_COMMAND_TYPE_IMAGE() {
        return CLAY_RENDER_COMMAND_TYPE_IMAGE;
    }
    private static final int CLAY_RENDER_COMMAND_TYPE_SCISSOR_START = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_RENDER_COMMAND_TYPE_SCISSOR_START = 5
     * }
     */
    public static int CLAY_RENDER_COMMAND_TYPE_SCISSOR_START() {
        return CLAY_RENDER_COMMAND_TYPE_SCISSOR_START;
    }
    private static final int CLAY_RENDER_COMMAND_TYPE_SCISSOR_END = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_RENDER_COMMAND_TYPE_SCISSOR_END = 6
     * }
     */
    public static int CLAY_RENDER_COMMAND_TYPE_SCISSOR_END() {
        return CLAY_RENDER_COMMAND_TYPE_SCISSOR_END;
    }
    private static final int CLAY_RENDER_COMMAND_TYPE_CUSTOM = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLAY_RENDER_COMMAND_TYPE_CUSTOM = 7
     * }
     */
    public static int CLAY_RENDER_COMMAND_TYPE_CUSTOM() {
        return CLAY_RENDER_COMMAND_TYPE_CUSTOM;
    }

    private static class Clay_MinMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ClayFFM.C_INT    );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_MinMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t Clay_MinMemorySize()
     * }
     */
    public static FunctionDescriptor Clay_MinMemorySize$descriptor() {
        return Clay_MinMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t Clay_MinMemorySize()
     * }
     */
    public static MethodHandle Clay_MinMemorySize$handle() {
        return Clay_MinMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t Clay_MinMemorySize()
     * }
     */
    public static MemorySegment Clay_MinMemorySize$address() {
        return Clay_MinMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t Clay_MinMemorySize()
     * }
     */
    public static int Clay_MinMemorySize() {
        var mh$ = Clay_MinMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_MinMemorySize");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_CreateArenaWithCapacityAndMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Clay_Arena.layout(),
            ClayFFM.C_LONG_LONG,
            ClayFFM.C_POINTER
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_CreateArenaWithCapacityAndMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_Arena Clay_CreateArenaWithCapacityAndMemory(size_t capacity, void *memory)
     * }
     */
    public static FunctionDescriptor Clay_CreateArenaWithCapacityAndMemory$descriptor() {
        return Clay_CreateArenaWithCapacityAndMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_Arena Clay_CreateArenaWithCapacityAndMemory(size_t capacity, void *memory)
     * }
     */
    public static MethodHandle Clay_CreateArenaWithCapacityAndMemory$handle() {
        return Clay_CreateArenaWithCapacityAndMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_Arena Clay_CreateArenaWithCapacityAndMemory(size_t capacity, void *memory)
     * }
     */
    public static MemorySegment Clay_CreateArenaWithCapacityAndMemory$address() {
        return Clay_CreateArenaWithCapacityAndMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_Arena Clay_CreateArenaWithCapacityAndMemory(size_t capacity, void *memory)
     * }
     */
    public static MemorySegment Clay_CreateArenaWithCapacityAndMemory(SegmentAllocator allocator, long capacity, MemorySegment memory) {
        var mh$ = Clay_CreateArenaWithCapacityAndMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_CreateArenaWithCapacityAndMemory", allocator, capacity, memory);
            }
            return (MemorySegment)mh$.invokeExact(allocator, capacity, memory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_SetPointerState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Clay_Vector2.layout(),
            ClayFFM.C_BOOL
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_SetPointerState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_SetPointerState(Clay_Vector2 position, bool pointerDown)
     * }
     */
    public static FunctionDescriptor Clay_SetPointerState$descriptor() {
        return Clay_SetPointerState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_SetPointerState(Clay_Vector2 position, bool pointerDown)
     * }
     */
    public static MethodHandle Clay_SetPointerState$handle() {
        return Clay_SetPointerState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_SetPointerState(Clay_Vector2 position, bool pointerDown)
     * }
     */
    public static MemorySegment Clay_SetPointerState$address() {
        return Clay_SetPointerState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_SetPointerState(Clay_Vector2 position, bool pointerDown)
     * }
     */
    public static void Clay_SetPointerState(MemorySegment position, boolean pointerDown) {
        var mh$ = Clay_SetPointerState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_SetPointerState", position, pointerDown);
            }
            mh$.invokeExact(position, pointerDown);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_Initialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ClayFFM.C_POINTER,
            Clay_Arena.layout(),
            Clay_Dimensions.layout(),
            Clay_ErrorHandler.layout()
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_Initialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_Context *Clay_Initialize(Clay_Arena arena, Clay_Dimensions layoutDimensions, Clay_ErrorHandler errorHandler)
     * }
     */
    public static FunctionDescriptor Clay_Initialize$descriptor() {
        return Clay_Initialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_Context *Clay_Initialize(Clay_Arena arena, Clay_Dimensions layoutDimensions, Clay_ErrorHandler errorHandler)
     * }
     */
    public static MethodHandle Clay_Initialize$handle() {
        return Clay_Initialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_Context *Clay_Initialize(Clay_Arena arena, Clay_Dimensions layoutDimensions, Clay_ErrorHandler errorHandler)
     * }
     */
    public static MemorySegment Clay_Initialize$address() {
        return Clay_Initialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_Context *Clay_Initialize(Clay_Arena arena, Clay_Dimensions layoutDimensions, Clay_ErrorHandler errorHandler)
     * }
     */
    public static MemorySegment Clay_Initialize(MemorySegment arena, MemorySegment layoutDimensions, MemorySegment errorHandler) {
        var mh$ = Clay_Initialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_Initialize", arena, layoutDimensions, errorHandler);
            }
            return (MemorySegment)mh$.invokeExact(arena, layoutDimensions, errorHandler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_GetCurrentContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ClayFFM.C_POINTER    );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_GetCurrentContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_Context *Clay_GetCurrentContext()
     * }
     */
    public static FunctionDescriptor Clay_GetCurrentContext$descriptor() {
        return Clay_GetCurrentContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_Context *Clay_GetCurrentContext()
     * }
     */
    public static MethodHandle Clay_GetCurrentContext$handle() {
        return Clay_GetCurrentContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_Context *Clay_GetCurrentContext()
     * }
     */
    public static MemorySegment Clay_GetCurrentContext$address() {
        return Clay_GetCurrentContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_Context *Clay_GetCurrentContext()
     * }
     */
    public static MemorySegment Clay_GetCurrentContext() {
        var mh$ = Clay_GetCurrentContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_GetCurrentContext");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_SetCurrentContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ClayFFM.C_POINTER
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_SetCurrentContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_SetCurrentContext(Clay_Context *context)
     * }
     */
    public static FunctionDescriptor Clay_SetCurrentContext$descriptor() {
        return Clay_SetCurrentContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_SetCurrentContext(Clay_Context *context)
     * }
     */
    public static MethodHandle Clay_SetCurrentContext$handle() {
        return Clay_SetCurrentContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_SetCurrentContext(Clay_Context *context)
     * }
     */
    public static MemorySegment Clay_SetCurrentContext$address() {
        return Clay_SetCurrentContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_SetCurrentContext(Clay_Context *context)
     * }
     */
    public static void Clay_SetCurrentContext(MemorySegment context) {
        var mh$ = Clay_SetCurrentContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_SetCurrentContext", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_UpdateScrollContainers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ClayFFM.C_BOOL,
            Clay_Vector2.layout(),
            ClayFFM.C_FLOAT
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_UpdateScrollContainers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_UpdateScrollContainers(bool enableDragScrolling, Clay_Vector2 scrollDelta, float deltaTime)
     * }
     */
    public static FunctionDescriptor Clay_UpdateScrollContainers$descriptor() {
        return Clay_UpdateScrollContainers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_UpdateScrollContainers(bool enableDragScrolling, Clay_Vector2 scrollDelta, float deltaTime)
     * }
     */
    public static MethodHandle Clay_UpdateScrollContainers$handle() {
        return Clay_UpdateScrollContainers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_UpdateScrollContainers(bool enableDragScrolling, Clay_Vector2 scrollDelta, float deltaTime)
     * }
     */
    public static MemorySegment Clay_UpdateScrollContainers$address() {
        return Clay_UpdateScrollContainers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_UpdateScrollContainers(bool enableDragScrolling, Clay_Vector2 scrollDelta, float deltaTime)
     * }
     */
    public static void Clay_UpdateScrollContainers(boolean enableDragScrolling, MemorySegment scrollDelta, float deltaTime) {
        var mh$ = Clay_UpdateScrollContainers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_UpdateScrollContainers", enableDragScrolling, scrollDelta, deltaTime);
            }
            mh$.invokeExact(enableDragScrolling, scrollDelta, deltaTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_GetScrollOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Clay_Vector2.layout()    );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_GetScrollOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_Vector2 Clay_GetScrollOffset()
     * }
     */
    public static FunctionDescriptor Clay_GetScrollOffset$descriptor() {
        return Clay_GetScrollOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_Vector2 Clay_GetScrollOffset()
     * }
     */
    public static MethodHandle Clay_GetScrollOffset$handle() {
        return Clay_GetScrollOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_Vector2 Clay_GetScrollOffset()
     * }
     */
    public static MemorySegment Clay_GetScrollOffset$address() {
        return Clay_GetScrollOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_Vector2 Clay_GetScrollOffset()
     * }
     */
    public static MemorySegment Clay_GetScrollOffset(SegmentAllocator allocator) {
        var mh$ = Clay_GetScrollOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_GetScrollOffset", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_SetLayoutDimensions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Clay_Dimensions.layout()
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_SetLayoutDimensions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_SetLayoutDimensions(Clay_Dimensions dimensions)
     * }
     */
    public static FunctionDescriptor Clay_SetLayoutDimensions$descriptor() {
        return Clay_SetLayoutDimensions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_SetLayoutDimensions(Clay_Dimensions dimensions)
     * }
     */
    public static MethodHandle Clay_SetLayoutDimensions$handle() {
        return Clay_SetLayoutDimensions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_SetLayoutDimensions(Clay_Dimensions dimensions)
     * }
     */
    public static MemorySegment Clay_SetLayoutDimensions$address() {
        return Clay_SetLayoutDimensions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_SetLayoutDimensions(Clay_Dimensions dimensions)
     * }
     */
    public static void Clay_SetLayoutDimensions(MemorySegment dimensions) {
        var mh$ = Clay_SetLayoutDimensions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_SetLayoutDimensions", dimensions);
            }
            mh$.invokeExact(dimensions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_BeginLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_BeginLayout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_BeginLayout()
     * }
     */
    public static FunctionDescriptor Clay_BeginLayout$descriptor() {
        return Clay_BeginLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_BeginLayout()
     * }
     */
    public static MethodHandle Clay_BeginLayout$handle() {
        return Clay_BeginLayout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_BeginLayout()
     * }
     */
    public static MemorySegment Clay_BeginLayout$address() {
        return Clay_BeginLayout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_BeginLayout()
     * }
     */
    public static void Clay_BeginLayout() {
        var mh$ = Clay_BeginLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_BeginLayout");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_EndLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Clay_RenderCommandArray.layout()    );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_EndLayout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_RenderCommandArray Clay_EndLayout()
     * }
     */
    public static FunctionDescriptor Clay_EndLayout$descriptor() {
        return Clay_EndLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_RenderCommandArray Clay_EndLayout()
     * }
     */
    public static MethodHandle Clay_EndLayout$handle() {
        return Clay_EndLayout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_RenderCommandArray Clay_EndLayout()
     * }
     */
    public static MemorySegment Clay_EndLayout$address() {
        return Clay_EndLayout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_RenderCommandArray Clay_EndLayout()
     * }
     */
    public static MemorySegment Clay_EndLayout(SegmentAllocator allocator) {
        var mh$ = Clay_EndLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_EndLayout", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_GetElementId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Clay_ElementId.layout(),
            Clay_String.layout()
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_GetElementId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_ElementId Clay_GetElementId(Clay_String idString)
     * }
     */
    public static FunctionDescriptor Clay_GetElementId$descriptor() {
        return Clay_GetElementId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_ElementId Clay_GetElementId(Clay_String idString)
     * }
     */
    public static MethodHandle Clay_GetElementId$handle() {
        return Clay_GetElementId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_ElementId Clay_GetElementId(Clay_String idString)
     * }
     */
    public static MemorySegment Clay_GetElementId$address() {
        return Clay_GetElementId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_ElementId Clay_GetElementId(Clay_String idString)
     * }
     */
    public static MemorySegment Clay_GetElementId(SegmentAllocator allocator, MemorySegment idString) {
        var mh$ = Clay_GetElementId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_GetElementId", allocator, idString);
            }
            return (MemorySegment)mh$.invokeExact(allocator, idString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_GetElementData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Clay_ElementData.layout(),
            Clay_ElementId.layout()
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_GetElementData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_ElementData Clay_GetElementData(Clay_ElementId id)
     * }
     */
    public static FunctionDescriptor Clay_GetElementData$descriptor() {
        return Clay_GetElementData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_ElementData Clay_GetElementData(Clay_ElementId id)
     * }
     */
    public static MethodHandle Clay_GetElementData$handle() {
        return Clay_GetElementData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_ElementData Clay_GetElementData(Clay_ElementId id)
     * }
     */
    public static MemorySegment Clay_GetElementData$address() {
        return Clay_GetElementData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_ElementData Clay_GetElementData(Clay_ElementId id)
     * }
     */
    public static MemorySegment Clay_GetElementData(SegmentAllocator allocator, MemorySegment id) {
        var mh$ = Clay_GetElementData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_GetElementData", allocator, id);
            }
            return (MemorySegment)mh$.invokeExact(allocator, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_Hovered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ClayFFM.C_BOOL    );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_Hovered");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool Clay_Hovered()
     * }
     */
    public static FunctionDescriptor Clay_Hovered$descriptor() {
        return Clay_Hovered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool Clay_Hovered()
     * }
     */
    public static MethodHandle Clay_Hovered$handle() {
        return Clay_Hovered.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool Clay_Hovered()
     * }
     */
    public static MemorySegment Clay_Hovered$address() {
        return Clay_Hovered.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool Clay_Hovered()
     * }
     */
    public static boolean Clay_Hovered() {
        var mh$ = Clay_Hovered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_Hovered");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_OnHover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ClayFFM.C_POINTER,
            ClayFFM.C_LONG_LONG
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_OnHover");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_OnHover(void (*onHoverFunction)(Clay_ElementId, Clay_PointerData, intptr_t), intptr_t userData)
     * }
     */
    public static FunctionDescriptor Clay_OnHover$descriptor() {
        return Clay_OnHover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_OnHover(void (*onHoverFunction)(Clay_ElementId, Clay_PointerData, intptr_t), intptr_t userData)
     * }
     */
    public static MethodHandle Clay_OnHover$handle() {
        return Clay_OnHover.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_OnHover(void (*onHoverFunction)(Clay_ElementId, Clay_PointerData, intptr_t), intptr_t userData)
     * }
     */
    public static MemorySegment Clay_OnHover$address() {
        return Clay_OnHover.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_OnHover(void (*onHoverFunction)(Clay_ElementId, Clay_PointerData, intptr_t), intptr_t userData)
     * }
     */
    public static void Clay_OnHover(MemorySegment onHoverFunction, long userData) {
        var mh$ = Clay_OnHover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_OnHover", onHoverFunction, userData);
            }
            mh$.invokeExact(onHoverFunction, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_PointerOver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ClayFFM.C_BOOL,
            Clay_ElementId.layout()
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_PointerOver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool Clay_PointerOver(Clay_ElementId elementId)
     * }
     */
    public static FunctionDescriptor Clay_PointerOver$descriptor() {
        return Clay_PointerOver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool Clay_PointerOver(Clay_ElementId elementId)
     * }
     */
    public static MethodHandle Clay_PointerOver$handle() {
        return Clay_PointerOver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool Clay_PointerOver(Clay_ElementId elementId)
     * }
     */
    public static MemorySegment Clay_PointerOver$address() {
        return Clay_PointerOver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool Clay_PointerOver(Clay_ElementId elementId)
     * }
     */
    public static boolean Clay_PointerOver(MemorySegment elementId) {
        var mh$ = Clay_PointerOver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_PointerOver", elementId);
            }
            return (boolean)mh$.invokeExact(elementId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_GetScrollContainerData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Clay_ScrollContainerData.layout(),
            Clay_ElementId.layout()
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_GetScrollContainerData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_ScrollContainerData Clay_GetScrollContainerData(Clay_ElementId id)
     * }
     */
    public static FunctionDescriptor Clay_GetScrollContainerData$descriptor() {
        return Clay_GetScrollContainerData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_ScrollContainerData Clay_GetScrollContainerData(Clay_ElementId id)
     * }
     */
    public static MethodHandle Clay_GetScrollContainerData$handle() {
        return Clay_GetScrollContainerData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_ScrollContainerData Clay_GetScrollContainerData(Clay_ElementId id)
     * }
     */
    public static MemorySegment Clay_GetScrollContainerData$address() {
        return Clay_GetScrollContainerData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_ScrollContainerData Clay_GetScrollContainerData(Clay_ElementId id)
     * }
     */
    public static MemorySegment Clay_GetScrollContainerData(SegmentAllocator allocator, MemorySegment id) {
        var mh$ = Clay_GetScrollContainerData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_GetScrollContainerData", allocator, id);
            }
            return (MemorySegment)mh$.invokeExact(allocator, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_SetMeasureTextFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ClayFFM.C_POINTER,
            ClayFFM.C_POINTER
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_SetMeasureTextFunction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_SetMeasureTextFunction(Clay_Dimensions (*measureTextFunction)(Clay_StringSlice, Clay_TextElementConfig *, void *), void *userData)
     * }
     */
    public static FunctionDescriptor Clay_SetMeasureTextFunction$descriptor() {
        return Clay_SetMeasureTextFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_SetMeasureTextFunction(Clay_Dimensions (*measureTextFunction)(Clay_StringSlice, Clay_TextElementConfig *, void *), void *userData)
     * }
     */
    public static MethodHandle Clay_SetMeasureTextFunction$handle() {
        return Clay_SetMeasureTextFunction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_SetMeasureTextFunction(Clay_Dimensions (*measureTextFunction)(Clay_StringSlice, Clay_TextElementConfig *, void *), void *userData)
     * }
     */
    public static MemorySegment Clay_SetMeasureTextFunction$address() {
        return Clay_SetMeasureTextFunction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_SetMeasureTextFunction(Clay_Dimensions (*measureTextFunction)(Clay_StringSlice, Clay_TextElementConfig *, void *), void *userData)
     * }
     */
    public static void Clay_SetMeasureTextFunction(MemorySegment measureTextFunction, MemorySegment userData) {
        var mh$ = Clay_SetMeasureTextFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_SetMeasureTextFunction", measureTextFunction, userData);
            }
            mh$.invokeExact(measureTextFunction, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_RenderCommandArray_Get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ClayFFM.C_POINTER,
            ClayFFM.C_POINTER,
            ClayFFM.C_INT
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_RenderCommandArray_Get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_RenderCommand *Clay_RenderCommandArray_Get(Clay_RenderCommandArray *array, int32_t index)
     * }
     */
    public static FunctionDescriptor Clay_RenderCommandArray_Get$descriptor() {
        return Clay_RenderCommandArray_Get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_RenderCommand *Clay_RenderCommandArray_Get(Clay_RenderCommandArray *array, int32_t index)
     * }
     */
    public static MethodHandle Clay_RenderCommandArray_Get$handle() {
        return Clay_RenderCommandArray_Get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_RenderCommand *Clay_RenderCommandArray_Get(Clay_RenderCommandArray *array, int32_t index)
     * }
     */
    public static MemorySegment Clay_RenderCommandArray_Get$address() {
        return Clay_RenderCommandArray_Get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_RenderCommand *Clay_RenderCommandArray_Get(Clay_RenderCommandArray *array, int32_t index)
     * }
     */
    public static MemorySegment Clay_RenderCommandArray_Get(MemorySegment array, int index) {
        var mh$ = Clay_RenderCommandArray_Get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_RenderCommandArray_Get", array, index);
            }
            return (MemorySegment)mh$.invokeExact(array, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_SetDebugModeEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ClayFFM.C_BOOL
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_SetDebugModeEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_SetDebugModeEnabled(bool enabled)
     * }
     */
    public static FunctionDescriptor Clay_SetDebugModeEnabled$descriptor() {
        return Clay_SetDebugModeEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_SetDebugModeEnabled(bool enabled)
     * }
     */
    public static MethodHandle Clay_SetDebugModeEnabled$handle() {
        return Clay_SetDebugModeEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_SetDebugModeEnabled(bool enabled)
     * }
     */
    public static MemorySegment Clay_SetDebugModeEnabled$address() {
        return Clay_SetDebugModeEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_SetDebugModeEnabled(bool enabled)
     * }
     */
    public static void Clay_SetDebugModeEnabled(boolean enabled) {
        var mh$ = Clay_SetDebugModeEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_SetDebugModeEnabled", enabled);
            }
            mh$.invokeExact(enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_SetMaxElementCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ClayFFM.C_INT
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_SetMaxElementCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_SetMaxElementCount(int32_t maxElementCount)
     * }
     */
    public static FunctionDescriptor Clay_SetMaxElementCount$descriptor() {
        return Clay_SetMaxElementCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_SetMaxElementCount(int32_t maxElementCount)
     * }
     */
    public static MethodHandle Clay_SetMaxElementCount$handle() {
        return Clay_SetMaxElementCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_SetMaxElementCount(int32_t maxElementCount)
     * }
     */
    public static MemorySegment Clay_SetMaxElementCount$address() {
        return Clay_SetMaxElementCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_SetMaxElementCount(int32_t maxElementCount)
     * }
     */
    public static void Clay_SetMaxElementCount(int maxElementCount) {
        var mh$ = Clay_SetMaxElementCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_SetMaxElementCount", maxElementCount);
            }
            mh$.invokeExact(maxElementCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_SetMaxMeasureTextCacheWordCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ClayFFM.C_INT
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_SetMaxMeasureTextCacheWordCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_SetMaxMeasureTextCacheWordCount(int32_t maxMeasureTextCacheWordCount)
     * }
     */
    public static FunctionDescriptor Clay_SetMaxMeasureTextCacheWordCount$descriptor() {
        return Clay_SetMaxMeasureTextCacheWordCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_SetMaxMeasureTextCacheWordCount(int32_t maxMeasureTextCacheWordCount)
     * }
     */
    public static MethodHandle Clay_SetMaxMeasureTextCacheWordCount$handle() {
        return Clay_SetMaxMeasureTextCacheWordCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_SetMaxMeasureTextCacheWordCount(int32_t maxMeasureTextCacheWordCount)
     * }
     */
    public static MemorySegment Clay_SetMaxMeasureTextCacheWordCount$address() {
        return Clay_SetMaxMeasureTextCacheWordCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_SetMaxMeasureTextCacheWordCount(int32_t maxMeasureTextCacheWordCount)
     * }
     */
    public static void Clay_SetMaxMeasureTextCacheWordCount(int maxMeasureTextCacheWordCount) {
        var mh$ = Clay_SetMaxMeasureTextCacheWordCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_SetMaxMeasureTextCacheWordCount", maxMeasureTextCacheWordCount);
            }
            mh$.invokeExact(maxMeasureTextCacheWordCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay_ResetMeasureTextCache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay_ResetMeasureTextCache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay_ResetMeasureTextCache()
     * }
     */
    public static FunctionDescriptor Clay_ResetMeasureTextCache$descriptor() {
        return Clay_ResetMeasureTextCache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay_ResetMeasureTextCache()
     * }
     */
    public static MethodHandle Clay_ResetMeasureTextCache$handle() {
        return Clay_ResetMeasureTextCache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay_ResetMeasureTextCache()
     * }
     */
    public static MemorySegment Clay_ResetMeasureTextCache$address() {
        return Clay_ResetMeasureTextCache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay_ResetMeasureTextCache()
     * }
     */
    public static void Clay_ResetMeasureTextCache() {
        var mh$ = Clay_ResetMeasureTextCache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay_ResetMeasureTextCache");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay__OpenElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay__OpenElement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay__OpenElement()
     * }
     */
    public static FunctionDescriptor Clay__OpenElement$descriptor() {
        return Clay__OpenElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay__OpenElement()
     * }
     */
    public static MethodHandle Clay__OpenElement$handle() {
        return Clay__OpenElement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay__OpenElement()
     * }
     */
    public static MemorySegment Clay__OpenElement$address() {
        return Clay__OpenElement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay__OpenElement()
     * }
     */
    public static void Clay__OpenElement() {
        var mh$ = Clay__OpenElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay__OpenElement");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay__ConfigureOpenElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Clay_ElementDeclaration.layout()
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay__ConfigureOpenElement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay__ConfigureOpenElement(const Clay_ElementDeclaration config)
     * }
     */
    public static FunctionDescriptor Clay__ConfigureOpenElement$descriptor() {
        return Clay__ConfigureOpenElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay__ConfigureOpenElement(const Clay_ElementDeclaration config)
     * }
     */
    public static MethodHandle Clay__ConfigureOpenElement$handle() {
        return Clay__ConfigureOpenElement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay__ConfigureOpenElement(const Clay_ElementDeclaration config)
     * }
     */
    public static MemorySegment Clay__ConfigureOpenElement$address() {
        return Clay__ConfigureOpenElement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay__ConfigureOpenElement(const Clay_ElementDeclaration config)
     * }
     */
    public static void Clay__ConfigureOpenElement(MemorySegment config) {
        var mh$ = Clay__ConfigureOpenElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay__ConfigureOpenElement", config);
            }
            mh$.invokeExact(config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay__CloseElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay__CloseElement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay__CloseElement()
     * }
     */
    public static FunctionDescriptor Clay__CloseElement$descriptor() {
        return Clay__CloseElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay__CloseElement()
     * }
     */
    public static MethodHandle Clay__CloseElement$handle() {
        return Clay__CloseElement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay__CloseElement()
     * }
     */
    public static MemorySegment Clay__CloseElement$address() {
        return Clay__CloseElement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay__CloseElement()
     * }
     */
    public static void Clay__CloseElement() {
        var mh$ = Clay__CloseElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay__CloseElement");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay__HashString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Clay_ElementId.layout(),
            Clay_String.layout(),
            ClayFFM.C_INT,
            ClayFFM.C_INT
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay__HashString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_ElementId Clay__HashString(Clay_String key, uint32_t offset, uint32_t seed)
     * }
     */
    public static FunctionDescriptor Clay__HashString$descriptor() {
        return Clay__HashString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_ElementId Clay__HashString(Clay_String key, uint32_t offset, uint32_t seed)
     * }
     */
    public static MethodHandle Clay__HashString$handle() {
        return Clay__HashString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_ElementId Clay__HashString(Clay_String key, uint32_t offset, uint32_t seed)
     * }
     */
    public static MemorySegment Clay__HashString$address() {
        return Clay__HashString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_ElementId Clay__HashString(Clay_String key, uint32_t offset, uint32_t seed)
     * }
     */
    public static MemorySegment Clay__HashString(SegmentAllocator allocator, MemorySegment key, int offset, int seed) {
        var mh$ = Clay__HashString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay__HashString", allocator, key, offset, seed);
            }
            return (MemorySegment)mh$.invokeExact(allocator, key, offset, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay__OpenTextElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Clay_String.layout(),
            ClayFFM.C_POINTER
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay__OpenTextElement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Clay__OpenTextElement(Clay_String text, Clay_TextElementConfig *textConfig)
     * }
     */
    public static FunctionDescriptor Clay__OpenTextElement$descriptor() {
        return Clay__OpenTextElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Clay__OpenTextElement(Clay_String text, Clay_TextElementConfig *textConfig)
     * }
     */
    public static MethodHandle Clay__OpenTextElement$handle() {
        return Clay__OpenTextElement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Clay__OpenTextElement(Clay_String text, Clay_TextElementConfig *textConfig)
     * }
     */
    public static MemorySegment Clay__OpenTextElement$address() {
        return Clay__OpenTextElement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Clay__OpenTextElement(Clay_String text, Clay_TextElementConfig *textConfig)
     * }
     */
    public static void Clay__OpenTextElement(MemorySegment text, MemorySegment textConfig) {
        var mh$ = Clay__OpenTextElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay__OpenTextElement", text, textConfig);
            }
            mh$.invokeExact(text, textConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Clay__StoreTextElementConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ClayFFM.C_POINTER,
            Clay_TextElementConfig.layout()
        );

        public static final MemorySegment ADDR = ClayFFM.findOrThrow("Clay__StoreTextElementConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Clay_TextElementConfig *Clay__StoreTextElementConfig(Clay_TextElementConfig config)
     * }
     */
    public static FunctionDescriptor Clay__StoreTextElementConfig$descriptor() {
        return Clay__StoreTextElementConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Clay_TextElementConfig *Clay__StoreTextElementConfig(Clay_TextElementConfig config)
     * }
     */
    public static MethodHandle Clay__StoreTextElementConfig$handle() {
        return Clay__StoreTextElementConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Clay_TextElementConfig *Clay__StoreTextElementConfig(Clay_TextElementConfig config)
     * }
     */
    public static MemorySegment Clay__StoreTextElementConfig$address() {
        return Clay__StoreTextElementConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Clay_TextElementConfig *Clay__StoreTextElementConfig(Clay_TextElementConfig config)
     * }
     */
    public static MemorySegment Clay__StoreTextElementConfig(MemorySegment config) {
        var mh$ = Clay__StoreTextElementConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Clay__StoreTextElementConfig", config);
            }
            return (MemorySegment)mh$.invokeExact(config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

