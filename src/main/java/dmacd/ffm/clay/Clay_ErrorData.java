// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_ErrorData {
 *     Clay_ErrorType errorType;
 *     Clay_String errorText;
 *     void *userData;
 * }
 * }
 */
public class Clay_ErrorData {

    Clay_ErrorData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ClayFFM.C_INT.withName("errorType"),
        MemoryLayout.paddingLayout(4),
        Clay_String.layout().withName("errorText"),
        ClayFFM.C_POINTER.withName("userData")
    ).withName("Clay_ErrorData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt errorType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("errorType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_ErrorType errorType
     * }
     */
    public static final OfInt errorType$layout() {
        return errorType$LAYOUT;
    }

    private static final long errorType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_ErrorType errorType
     * }
     */
    public static final long errorType$offset() {
        return errorType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_ErrorType errorType
     * }
     */
    public static int errorType(MemorySegment struct) {
        return struct.get(errorType$LAYOUT, errorType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_ErrorType errorType
     * }
     */
    public static void errorType(MemorySegment struct, int fieldValue) {
        struct.set(errorType$LAYOUT, errorType$OFFSET, fieldValue);
    }

    private static final GroupLayout errorText$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("errorText"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_String errorText
     * }
     */
    public static final GroupLayout errorText$layout() {
        return errorText$LAYOUT;
    }

    private static final long errorText$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_String errorText
     * }
     */
    public static final long errorText$offset() {
        return errorText$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_String errorText
     * }
     */
    public static MemorySegment errorText(MemorySegment struct) {
        return struct.asSlice(errorText$OFFSET, errorText$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_String errorText
     * }
     */
    public static void errorText(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, errorText$OFFSET, errorText$LAYOUT.byteSize());
    }

    private static final AddressLayout userData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final AddressLayout userData$layout() {
        return userData$LAYOUT;
    }

    private static final long userData$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final long userData$offset() {
        return userData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static MemorySegment userData(MemorySegment struct) {
        return struct.get(userData$LAYOUT, userData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static void userData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userData$LAYOUT, userData$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

