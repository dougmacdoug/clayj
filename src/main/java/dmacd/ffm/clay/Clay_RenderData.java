// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union Clay_RenderData {
 *     Clay_RectangleRenderData rectangle;
 *     Clay_TextRenderData text;
 *     Clay_ImageRenderData image;
 *     Clay_CustomRenderData custom;
 *     Clay_BorderRenderData border;
 *     Clay_ClipRenderData clip;
 * }
 * }
 */
public class Clay_RenderData {

    Clay_RenderData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        Clay_RectangleRenderData.layout().withName("rectangle"),
        Clay_TextRenderData.layout().withName("text"),
        Clay_ImageRenderData.layout().withName("image"),
        Clay_CustomRenderData.layout().withName("custom"),
        Clay_BorderRenderData.layout().withName("border"),
        Clay_ScrollRenderData.layout().withName("clip")
    ).withName("Clay_RenderData");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout rectangle$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rectangle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_RectangleRenderData rectangle
     * }
     */
    public static final GroupLayout rectangle$layout() {
        return rectangle$LAYOUT;
    }

    private static final long rectangle$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_RectangleRenderData rectangle
     * }
     */
    public static final long rectangle$offset() {
        return rectangle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_RectangleRenderData rectangle
     * }
     */
    public static MemorySegment rectangle(MemorySegment union) {
        return union.asSlice(rectangle$OFFSET, rectangle$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_RectangleRenderData rectangle
     * }
     */
    public static void rectangle(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, rectangle$OFFSET, rectangle$LAYOUT.byteSize());
    }

    private static final GroupLayout text$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_TextRenderData text
     * }
     */
    public static final GroupLayout text$layout() {
        return text$LAYOUT;
    }

    private static final long text$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_TextRenderData text
     * }
     */
    public static final long text$offset() {
        return text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_TextRenderData text
     * }
     */
    public static MemorySegment text(MemorySegment union) {
        return union.asSlice(text$OFFSET, text$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_TextRenderData text
     * }
     */
    public static void text(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, text$OFFSET, text$LAYOUT.byteSize());
    }

    private static final GroupLayout image$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_ImageRenderData image
     * }
     */
    public static final GroupLayout image$layout() {
        return image$LAYOUT;
    }

    private static final long image$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_ImageRenderData image
     * }
     */
    public static final long image$offset() {
        return image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_ImageRenderData image
     * }
     */
    public static MemorySegment image(MemorySegment union) {
        return union.asSlice(image$OFFSET, image$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_ImageRenderData image
     * }
     */
    public static void image(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, image$OFFSET, image$LAYOUT.byteSize());
    }

    private static final GroupLayout custom$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("custom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_CustomRenderData custom
     * }
     */
    public static final GroupLayout custom$layout() {
        return custom$LAYOUT;
    }

    private static final long custom$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_CustomRenderData custom
     * }
     */
    public static final long custom$offset() {
        return custom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_CustomRenderData custom
     * }
     */
    public static MemorySegment custom(MemorySegment union) {
        return union.asSlice(custom$OFFSET, custom$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_CustomRenderData custom
     * }
     */
    public static void custom(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, custom$OFFSET, custom$LAYOUT.byteSize());
    }

    private static final GroupLayout border$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("border"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_BorderRenderData border
     * }
     */
    public static final GroupLayout border$layout() {
        return border$LAYOUT;
    }

    private static final long border$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_BorderRenderData border
     * }
     */
    public static final long border$offset() {
        return border$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_BorderRenderData border
     * }
     */
    public static MemorySegment border(MemorySegment union) {
        return union.asSlice(border$OFFSET, border$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_BorderRenderData border
     * }
     */
    public static void border(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, border$OFFSET, border$LAYOUT.byteSize());
    }

    private static final GroupLayout clip$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("clip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_ClipRenderData clip
     * }
     */
    public static final GroupLayout clip$layout() {
        return clip$LAYOUT;
    }

    private static final long clip$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_ClipRenderData clip
     * }
     */
    public static final long clip$offset() {
        return clip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_ClipRenderData clip
     * }
     */
    public static MemorySegment clip(MemorySegment union) {
        return union.asSlice(clip$OFFSET, clip$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_ClipRenderData clip
     * }
     */
    public static void clip(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, clip$OFFSET, clip$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

