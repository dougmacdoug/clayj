// Generated by jextract

package dmacd.ffm.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Camera3D {
 *     Vector3 position;
 *     Vector3 target;
 *     Vector3 up;
 *     float fovy;
 *     int projection;
 * }
 * }
 */
public class Camera3D {

    Camera3D() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Vector3.layout().withName("position"),
        Vector3.layout().withName("target"),
        Vector3.layout().withName("up"),
        RayFFM.C_FLOAT.withName("fovy"),
        RayFFM.C_INT.withName("projection")
    ).withName("Camera3D");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout position$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Vector3 position
     * }
     */
    public static final GroupLayout position$layout() {
        return position$LAYOUT;
    }

    private static final long position$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Vector3 position
     * }
     */
    public static final long position$offset() {
        return position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Vector3 position
     * }
     */
    public static MemorySegment position(MemorySegment struct) {
        return struct.asSlice(position$OFFSET, position$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Vector3 position
     * }
     */
    public static void position(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, position$OFFSET, position$LAYOUT.byteSize());
    }

    private static final GroupLayout target$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("target"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Vector3 target
     * }
     */
    public static final GroupLayout target$layout() {
        return target$LAYOUT;
    }

    private static final long target$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Vector3 target
     * }
     */
    public static final long target$offset() {
        return target$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Vector3 target
     * }
     */
    public static MemorySegment target(MemorySegment struct) {
        return struct.asSlice(target$OFFSET, target$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Vector3 target
     * }
     */
    public static void target(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, target$OFFSET, target$LAYOUT.byteSize());
    }

    private static final GroupLayout up$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("up"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Vector3 up
     * }
     */
    public static final GroupLayout up$layout() {
        return up$LAYOUT;
    }

    private static final long up$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Vector3 up
     * }
     */
    public static final long up$offset() {
        return up$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Vector3 up
     * }
     */
    public static MemorySegment up(MemorySegment struct) {
        return struct.asSlice(up$OFFSET, up$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Vector3 up
     * }
     */
    public static void up(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, up$OFFSET, up$LAYOUT.byteSize());
    }

    private static final OfFloat fovy$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("fovy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float fovy
     * }
     */
    public static final OfFloat fovy$layout() {
        return fovy$LAYOUT;
    }

    private static final long fovy$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float fovy
     * }
     */
    public static final long fovy$offset() {
        return fovy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float fovy
     * }
     */
    public static float fovy(MemorySegment struct) {
        return struct.get(fovy$LAYOUT, fovy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float fovy
     * }
     */
    public static void fovy(MemorySegment struct, float fieldValue) {
        struct.set(fovy$LAYOUT, fovy$OFFSET, fieldValue);
    }

    private static final OfInt projection$LAYOUT = (OfInt)$LAYOUT.select(groupElement("projection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int projection
     * }
     */
    public static final OfInt projection$layout() {
        return projection$LAYOUT;
    }

    private static final long projection$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int projection
     * }
     */
    public static final long projection$offset() {
        return projection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int projection
     * }
     */
    public static int projection(MemorySegment struct) {
        return struct.get(projection$LAYOUT, projection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int projection
     * }
     */
    public static void projection(MemorySegment struct, int fieldValue) {
        struct.set(projection$LAYOUT, projection$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

