// Generated by jextract

package dmacd.ffm.raylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct GlyphInfo {
 *     int value;
 *     int offsetX;
 *     int offsetY;
 *     int advanceX;
 *     Image image;
 * }
 * }
 */
public class GlyphInfo {

    GlyphInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        RayFFM.C_INT.withName("value"),
        RayFFM.C_INT.withName("offsetX"),
        RayFFM.C_INT.withName("offsetY"),
        RayFFM.C_INT.withName("advanceX"),
        Image.layout().withName("image")
    ).withName("GlyphInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt value$LAYOUT = (OfInt)$LAYOUT.select(groupElement("value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int value
     * }
     */
    public static final OfInt value$layout() {
        return value$LAYOUT;
    }

    private static final long value$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int value
     * }
     */
    public static final long value$offset() {
        return value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int value
     * }
     */
    public static int value(MemorySegment struct) {
        return struct.get(value$LAYOUT, value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int value
     * }
     */
    public static void value(MemorySegment struct, int fieldValue) {
        struct.set(value$LAYOUT, value$OFFSET, fieldValue);
    }

    private static final OfInt offsetX$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offsetX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int offsetX
     * }
     */
    public static final OfInt offsetX$layout() {
        return offsetX$LAYOUT;
    }

    private static final long offsetX$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int offsetX
     * }
     */
    public static final long offsetX$offset() {
        return offsetX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int offsetX
     * }
     */
    public static int offsetX(MemorySegment struct) {
        return struct.get(offsetX$LAYOUT, offsetX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int offsetX
     * }
     */
    public static void offsetX(MemorySegment struct, int fieldValue) {
        struct.set(offsetX$LAYOUT, offsetX$OFFSET, fieldValue);
    }

    private static final OfInt offsetY$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offsetY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int offsetY
     * }
     */
    public static final OfInt offsetY$layout() {
        return offsetY$LAYOUT;
    }

    private static final long offsetY$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int offsetY
     * }
     */
    public static final long offsetY$offset() {
        return offsetY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int offsetY
     * }
     */
    public static int offsetY(MemorySegment struct) {
        return struct.get(offsetY$LAYOUT, offsetY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int offsetY
     * }
     */
    public static void offsetY(MemorySegment struct, int fieldValue) {
        struct.set(offsetY$LAYOUT, offsetY$OFFSET, fieldValue);
    }

    private static final OfInt advanceX$LAYOUT = (OfInt)$LAYOUT.select(groupElement("advanceX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int advanceX
     * }
     */
    public static final OfInt advanceX$layout() {
        return advanceX$LAYOUT;
    }

    private static final long advanceX$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int advanceX
     * }
     */
    public static final long advanceX$offset() {
        return advanceX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int advanceX
     * }
     */
    public static int advanceX(MemorySegment struct) {
        return struct.get(advanceX$LAYOUT, advanceX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int advanceX
     * }
     */
    public static void advanceX(MemorySegment struct, int fieldValue) {
        struct.set(advanceX$LAYOUT, advanceX$OFFSET, fieldValue);
    }

    private static final GroupLayout image$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Image image
     * }
     */
    public static final GroupLayout image$layout() {
        return image$LAYOUT;
    }

    private static final long image$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Image image
     * }
     */
    public static final long image$offset() {
        return image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Image image
     * }
     */
    public static MemorySegment image(MemorySegment struct) {
        return struct.asSlice(image$OFFSET, image$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Image image
     * }
     */
    public static void image(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, image$OFFSET, image$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

