// Generated by jextract

package dmacd.clay.renderer;

import dmacd.ffm.raylib.RayFFM;
import dmacd.ffm.raylib.Raylib;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     Model model;
 *     float scale;
 *     Vector3 position;
 *     Matrix rotation;
 * }
 * }
 */
public class CustomLayoutElement_3DModel {

    CustomLayoutElement_3DModel() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Raylib.Model.layout().withName("model"),
        RayFFM.C_FLOAT.withName("scale"),
        Raylib.Vector3.layout().withName("position"),
        Raylib.Matrix.layout().withName("rotation")
    ).withName("$anon$11:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout model$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("model"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Model model
     * }
     */
    public static final GroupLayout model$layout() {
        return model$LAYOUT;
    }

    private static final long model$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Model model
     * }
     */
    public static final long model$offset() {
        return model$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Model model
     * }
     */
    public static MemorySegment model(MemorySegment struct) {
        return struct.asSlice(model$OFFSET, model$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Model model
     * }
     */
    public static void model(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, model$OFFSET, model$LAYOUT.byteSize());
    }

    private static final OfFloat scale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static final OfFloat scale$layout() {
        return scale$LAYOUT;
    }

    private static final long scale$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static final long scale$offset() {
        return scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static float scale(MemorySegment struct) {
        return struct.get(scale$LAYOUT, scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float scale
     * }
     */
    public static void scale(MemorySegment struct, float fieldValue) {
        struct.set(scale$LAYOUT, scale$OFFSET, fieldValue);
    }

    private static final GroupLayout position$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Vector3 position
     * }
     */
    public static final GroupLayout position$layout() {
        return position$LAYOUT;
    }

    private static final long position$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Vector3 position
     * }
     */
    public static final long position$offset() {
        return position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Vector3 position
     * }
     */
    public static MemorySegment position(MemorySegment struct) {
        return struct.asSlice(position$OFFSET, position$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Vector3 position
     * }
     */
    public static void position(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, position$OFFSET, position$LAYOUT.byteSize());
    }

    private static final GroupLayout rotation$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rotation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Matrix rotation
     * }
     */
    public static final GroupLayout rotation$layout() {
        return rotation$LAYOUT;
    }

    private static final long rotation$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Matrix rotation
     * }
     */
    public static final long rotation$offset() {
        return rotation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Matrix rotation
     * }
     */
    public static MemorySegment rotation(MemorySegment struct) {
        return struct.asSlice(rotation$OFFSET, rotation$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Matrix rotation
     * }
     */
    public static void rotation(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rotation$OFFSET, rotation$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

