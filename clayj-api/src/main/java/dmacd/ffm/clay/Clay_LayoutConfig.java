// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_LayoutConfig {
 *     Clay_Sizing sizing;
 *     Clay_Padding padding;
 *     uint16_t childGap;
 *     Clay_ChildAlignment childAlignment;
 *     Clay_LayoutDirection layoutDirection;
 * }
 * }
 */
public class Clay_LayoutConfig {

    Clay_LayoutConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clay_Sizing.layout().withName("sizing"),
        Clay_Padding.layout().withName("padding"),
        ClayFFM.C_SHORT.withName("childGap"),
        MemoryLayout.paddingLayout(2),
        Clay_ChildAlignment.layout().withName("childAlignment"),
        ClayFFM.C_INT.withName("layoutDirection")
    ).withName("Clay_LayoutConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout sizing$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sizing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Sizing sizing
     * }
     */
    public static final GroupLayout sizing$layout() {
        return sizing$LAYOUT;
    }

    private static final long sizing$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Sizing sizing
     * }
     */
    public static final long sizing$offset() {
        return sizing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Sizing sizing
     * }
     */
    public static MemorySegment sizing(MemorySegment struct) {
        return struct.asSlice(sizing$OFFSET, sizing$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Sizing sizing
     * }
     */
    public static void sizing(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sizing$OFFSET, sizing$LAYOUT.byteSize());
    }

    private static final GroupLayout padding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("padding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Padding padding
     * }
     */
    public static final GroupLayout padding$layout() {
        return padding$LAYOUT;
    }

    private static final long padding$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Padding padding
     * }
     */
    public static final long padding$offset() {
        return padding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Padding padding
     * }
     */
    public static MemorySegment padding(MemorySegment struct) {
        return struct.asSlice(padding$OFFSET, padding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Padding padding
     * }
     */
    public static void padding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding$OFFSET, padding$LAYOUT.byteSize());
    }

    private static final OfShort childGap$LAYOUT = (OfShort)$LAYOUT.select(groupElement("childGap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t childGap
     * }
     */
    public static final OfShort childGap$layout() {
        return childGap$LAYOUT;
    }

    private static final long childGap$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t childGap
     * }
     */
    public static final long childGap$offset() {
        return childGap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t childGap
     * }
     */
    public static short childGap(MemorySegment struct) {
        return struct.get(childGap$LAYOUT, childGap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t childGap
     * }
     */
    public static void childGap(MemorySegment struct, short fieldValue) {
        struct.set(childGap$LAYOUT, childGap$OFFSET, fieldValue);
    }

    private static final GroupLayout childAlignment$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("childAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_ChildAlignment childAlignment
     * }
     */
    public static final GroupLayout childAlignment$layout() {
        return childAlignment$LAYOUT;
    }

    private static final long childAlignment$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_ChildAlignment childAlignment
     * }
     */
    public static final long childAlignment$offset() {
        return childAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_ChildAlignment childAlignment
     * }
     */
    public static MemorySegment childAlignment(MemorySegment struct) {
        return struct.asSlice(childAlignment$OFFSET, childAlignment$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_ChildAlignment childAlignment
     * }
     */
    public static void childAlignment(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, childAlignment$OFFSET, childAlignment$LAYOUT.byteSize());
    }

    private static final OfInt layoutDirection$LAYOUT = (OfInt)$LAYOUT.select(groupElement("layoutDirection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_LayoutDirection layoutDirection
     * }
     */
    public static final OfInt layoutDirection$layout() {
        return layoutDirection$LAYOUT;
    }

    private static final long layoutDirection$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_LayoutDirection layoutDirection
     * }
     */
    public static final long layoutDirection$offset() {
        return layoutDirection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_LayoutDirection layoutDirection
     * }
     */
    public static int layoutDirection(MemorySegment struct) {
        return struct.get(layoutDirection$LAYOUT, layoutDirection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_LayoutDirection layoutDirection
     * }
     */
    public static void layoutDirection(MemorySegment struct, int fieldValue) {
        struct.set(layoutDirection$LAYOUT, layoutDirection$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

