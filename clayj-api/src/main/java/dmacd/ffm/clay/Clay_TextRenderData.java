// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_TextRenderData {
 *     Clay_StringSlice stringContents;
 *     Clay_Color textColor;
 *     uint16_t fontId;
 *     uint16_t fontSize;
 *     uint16_t letterSpacing;
 *     uint16_t lineHeight;
 * }
 * }
 */
public class Clay_TextRenderData {

    Clay_TextRenderData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clay_StringSlice.layout().withName("stringContents"),
        Clay_Color.layout().withName("textColor"),
        ClayFFM.C_SHORT.withName("fontId"),
        ClayFFM.C_SHORT.withName("fontSize"),
        ClayFFM.C_SHORT.withName("letterSpacing"),
        ClayFFM.C_SHORT.withName("lineHeight")
    ).withName("Clay_TextRenderData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout stringContents$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("stringContents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_StringSlice stringContents
     * }
     */
    public static final GroupLayout stringContents$layout() {
        return stringContents$LAYOUT;
    }

    private static final long stringContents$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_StringSlice stringContents
     * }
     */
    public static final long stringContents$offset() {
        return stringContents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_StringSlice stringContents
     * }
     */
    public static MemorySegment stringContents(MemorySegment struct) {
        return struct.asSlice(stringContents$OFFSET, stringContents$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_StringSlice stringContents
     * }
     */
    public static void stringContents(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stringContents$OFFSET, stringContents$LAYOUT.byteSize());
    }

    private static final GroupLayout textColor$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("textColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Color textColor
     * }
     */
    public static final GroupLayout textColor$layout() {
        return textColor$LAYOUT;
    }

    private static final long textColor$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Color textColor
     * }
     */
    public static final long textColor$offset() {
        return textColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Color textColor
     * }
     */
    public static MemorySegment textColor(MemorySegment struct) {
        return struct.asSlice(textColor$OFFSET, textColor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Color textColor
     * }
     */
    public static void textColor(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, textColor$OFFSET, textColor$LAYOUT.byteSize());
    }

    private static final OfShort fontId$LAYOUT = (OfShort)$LAYOUT.select(groupElement("fontId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t fontId
     * }
     */
    public static final OfShort fontId$layout() {
        return fontId$LAYOUT;
    }

    private static final long fontId$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t fontId
     * }
     */
    public static final long fontId$offset() {
        return fontId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t fontId
     * }
     */
    public static short fontId(MemorySegment struct) {
        return struct.get(fontId$LAYOUT, fontId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t fontId
     * }
     */
    public static void fontId(MemorySegment struct, short fieldValue) {
        struct.set(fontId$LAYOUT, fontId$OFFSET, fieldValue);
    }

    private static final OfShort fontSize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("fontSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t fontSize
     * }
     */
    public static final OfShort fontSize$layout() {
        return fontSize$LAYOUT;
    }

    private static final long fontSize$OFFSET = 42;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t fontSize
     * }
     */
    public static final long fontSize$offset() {
        return fontSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t fontSize
     * }
     */
    public static short fontSize(MemorySegment struct) {
        return struct.get(fontSize$LAYOUT, fontSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t fontSize
     * }
     */
    public static void fontSize(MemorySegment struct, short fieldValue) {
        struct.set(fontSize$LAYOUT, fontSize$OFFSET, fieldValue);
    }

    private static final OfShort letterSpacing$LAYOUT = (OfShort)$LAYOUT.select(groupElement("letterSpacing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t letterSpacing
     * }
     */
    public static final OfShort letterSpacing$layout() {
        return letterSpacing$LAYOUT;
    }

    private static final long letterSpacing$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t letterSpacing
     * }
     */
    public static final long letterSpacing$offset() {
        return letterSpacing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t letterSpacing
     * }
     */
    public static short letterSpacing(MemorySegment struct) {
        return struct.get(letterSpacing$LAYOUT, letterSpacing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t letterSpacing
     * }
     */
    public static void letterSpacing(MemorySegment struct, short fieldValue) {
        struct.set(letterSpacing$LAYOUT, letterSpacing$OFFSET, fieldValue);
    }

    private static final OfShort lineHeight$LAYOUT = (OfShort)$LAYOUT.select(groupElement("lineHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t lineHeight
     * }
     */
    public static final OfShort lineHeight$layout() {
        return lineHeight$LAYOUT;
    }

    private static final long lineHeight$OFFSET = 46;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t lineHeight
     * }
     */
    public static final long lineHeight$offset() {
        return lineHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t lineHeight
     * }
     */
    public static short lineHeight(MemorySegment struct) {
        return struct.get(lineHeight$LAYOUT, lineHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t lineHeight
     * }
     */
    public static void lineHeight(MemorySegment struct, short fieldValue) {
        struct.set(lineHeight$LAYOUT, lineHeight$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

