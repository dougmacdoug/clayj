// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_ScrollContainerData {
 *     Clay_Vector2 *scrollPosition;
 *     Clay_Dimensions scrollContainerDimensions;
 *     Clay_Dimensions contentDimensions;
 *     Clay_ClipElementConfig config;
 *     bool found;
 * }
 * }
 */
public class Clay_ScrollContainerData {

    Clay_ScrollContainerData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ClayFFM.C_POINTER.withName("scrollPosition"),
        Clay_Dimensions.layout().withName("scrollContainerDimensions"),
        Clay_Dimensions.layout().withName("contentDimensions"),
        Clay_ClipElementConfig.layout().withName("config"),
        ClayFFM.C_BOOL.withName("found"),
        MemoryLayout.paddingLayout(3)
    ).withName("Clay_ScrollContainerData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout scrollPosition$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("scrollPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Vector2 *scrollPosition
     * }
     */
    public static final AddressLayout scrollPosition$layout() {
        return scrollPosition$LAYOUT;
    }

    private static final long scrollPosition$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Vector2 *scrollPosition
     * }
     */
    public static final long scrollPosition$offset() {
        return scrollPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Vector2 *scrollPosition
     * }
     */
    public static MemorySegment scrollPosition(MemorySegment struct) {
        return struct.get(scrollPosition$LAYOUT, scrollPosition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Vector2 *scrollPosition
     * }
     */
    public static void scrollPosition(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(scrollPosition$LAYOUT, scrollPosition$OFFSET, fieldValue);
    }

    private static final GroupLayout scrollContainerDimensions$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("scrollContainerDimensions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Dimensions scrollContainerDimensions
     * }
     */
    public static final GroupLayout scrollContainerDimensions$layout() {
        return scrollContainerDimensions$LAYOUT;
    }

    private static final long scrollContainerDimensions$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Dimensions scrollContainerDimensions
     * }
     */
    public static final long scrollContainerDimensions$offset() {
        return scrollContainerDimensions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Dimensions scrollContainerDimensions
     * }
     */
    public static MemorySegment scrollContainerDimensions(MemorySegment struct) {
        return struct.asSlice(scrollContainerDimensions$OFFSET, scrollContainerDimensions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Dimensions scrollContainerDimensions
     * }
     */
    public static void scrollContainerDimensions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scrollContainerDimensions$OFFSET, scrollContainerDimensions$LAYOUT.byteSize());
    }

    private static final GroupLayout contentDimensions$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("contentDimensions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_Dimensions contentDimensions
     * }
     */
    public static final GroupLayout contentDimensions$layout() {
        return contentDimensions$LAYOUT;
    }

    private static final long contentDimensions$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_Dimensions contentDimensions
     * }
     */
    public static final long contentDimensions$offset() {
        return contentDimensions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_Dimensions contentDimensions
     * }
     */
    public static MemorySegment contentDimensions(MemorySegment struct) {
        return struct.asSlice(contentDimensions$OFFSET, contentDimensions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_Dimensions contentDimensions
     * }
     */
    public static void contentDimensions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, contentDimensions$OFFSET, contentDimensions$LAYOUT.byteSize());
    }

    private static final GroupLayout config$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("config"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_ClipElementConfig config
     * }
     */
    public static final GroupLayout config$layout() {
        return config$LAYOUT;
    }

    private static final long config$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_ClipElementConfig config
     * }
     */
    public static final long config$offset() {
        return config$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_ClipElementConfig config
     * }
     */
    public static MemorySegment config(MemorySegment struct) {
        return struct.asSlice(config$OFFSET, config$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_ClipElementConfig config
     * }
     */
    public static void config(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, config$OFFSET, config$LAYOUT.byteSize());
    }

    private static final OfBoolean found$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("found"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool found
     * }
     */
    public static final OfBoolean found$layout() {
        return found$LAYOUT;
    }

    private static final long found$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool found
     * }
     */
    public static final long found$offset() {
        return found$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool found
     * }
     */
    public static boolean found(MemorySegment struct) {
        return struct.get(found$LAYOUT, found$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool found
     * }
     */
    public static void found(MemorySegment struct, boolean fieldValue) {
        struct.set(found$LAYOUT, found$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

