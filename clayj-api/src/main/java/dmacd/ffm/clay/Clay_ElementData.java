// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_ElementData {
 *     Clay_BoundingBox boundingBox;
 *     bool found;
 * }
 * }
 */
public class Clay_ElementData {

    Clay_ElementData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clay_BoundingBox.layout().withName("boundingBox"),
        ClayFFM.C_BOOL.withName("found"),
        MemoryLayout.paddingLayout(3)
    ).withName("Clay_ElementData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout boundingBox$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("boundingBox"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_BoundingBox boundingBox
     * }
     */
    public static final GroupLayout boundingBox$layout() {
        return boundingBox$LAYOUT;
    }

    private static final long boundingBox$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_BoundingBox boundingBox
     * }
     */
    public static final long boundingBox$offset() {
        return boundingBox$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_BoundingBox boundingBox
     * }
     */
    public static MemorySegment boundingBox(MemorySegment struct) {
        return struct.asSlice(boundingBox$OFFSET, boundingBox$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_BoundingBox boundingBox
     * }
     */
    public static void boundingBox(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, boundingBox$OFFSET, boundingBox$LAYOUT.byteSize());
    }

    private static final OfBoolean found$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("found"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool found
     * }
     */
    public static final OfBoolean found$layout() {
        return found$LAYOUT;
    }

    private static final long found$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool found
     * }
     */
    public static final long found$offset() {
        return found$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool found
     * }
     */
    public static boolean found(MemorySegment struct) {
        return struct.get(found$LAYOUT, found$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool found
     * }
     */
    public static void found(MemorySegment struct, boolean fieldValue) {
        struct.set(found$LAYOUT, found$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

