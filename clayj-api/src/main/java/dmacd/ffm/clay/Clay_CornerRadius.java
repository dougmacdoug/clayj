// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_CornerRadius {
 *     float topLeft;
 *     float topRight;
 *     float bottomLeft;
 *     float bottomRight;
 * }
 * }
 */
public class Clay_CornerRadius {

    Clay_CornerRadius() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ClayFFM.C_FLOAT.withName("topLeft"),
        ClayFFM.C_FLOAT.withName("topRight"),
        ClayFFM.C_FLOAT.withName("bottomLeft"),
        ClayFFM.C_FLOAT.withName("bottomRight")
    ).withName("Clay_CornerRadius");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat topLeft$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("topLeft"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float topLeft
     * }
     */
    public static final OfFloat topLeft$layout() {
        return topLeft$LAYOUT;
    }

    private static final long topLeft$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float topLeft
     * }
     */
    public static final long topLeft$offset() {
        return topLeft$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float topLeft
     * }
     */
    public static float topLeft(MemorySegment struct) {
        return struct.get(topLeft$LAYOUT, topLeft$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float topLeft
     * }
     */
    public static void topLeft(MemorySegment struct, float fieldValue) {
        struct.set(topLeft$LAYOUT, topLeft$OFFSET, fieldValue);
    }

    private static final OfFloat topRight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("topRight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float topRight
     * }
     */
    public static final OfFloat topRight$layout() {
        return topRight$LAYOUT;
    }

    private static final long topRight$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float topRight
     * }
     */
    public static final long topRight$offset() {
        return topRight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float topRight
     * }
     */
    public static float topRight(MemorySegment struct) {
        return struct.get(topRight$LAYOUT, topRight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float topRight
     * }
     */
    public static void topRight(MemorySegment struct, float fieldValue) {
        struct.set(topRight$LAYOUT, topRight$OFFSET, fieldValue);
    }

    private static final OfFloat bottomLeft$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("bottomLeft"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float bottomLeft
     * }
     */
    public static final OfFloat bottomLeft$layout() {
        return bottomLeft$LAYOUT;
    }

    private static final long bottomLeft$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float bottomLeft
     * }
     */
    public static final long bottomLeft$offset() {
        return bottomLeft$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float bottomLeft
     * }
     */
    public static float bottomLeft(MemorySegment struct) {
        return struct.get(bottomLeft$LAYOUT, bottomLeft$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float bottomLeft
     * }
     */
    public static void bottomLeft(MemorySegment struct, float fieldValue) {
        struct.set(bottomLeft$LAYOUT, bottomLeft$OFFSET, fieldValue);
    }

    private static final OfFloat bottomRight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("bottomRight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float bottomRight
     * }
     */
    public static final OfFloat bottomRight$layout() {
        return bottomRight$LAYOUT;
    }

    private static final long bottomRight$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float bottomRight
     * }
     */
    public static final long bottomRight$offset() {
        return bottomRight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float bottomRight
     * }
     */
    public static float bottomRight(MemorySegment struct) {
        return struct.get(bottomRight$LAYOUT, bottomRight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float bottomRight
     * }
     */
    public static void bottomRight(MemorySegment struct, float fieldValue) {
        struct.set(bottomRight$LAYOUT, bottomRight$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

