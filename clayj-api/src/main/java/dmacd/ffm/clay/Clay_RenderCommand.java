// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_RenderCommand {
 *     Clay_BoundingBox boundingBox;
 *     Clay_RenderData renderData;
 *     void *userData;
 *     uint32_t id;
 *     int16_t zIndex;
 *     Clay_RenderCommandType commandType;
 * }
 * }
 */
public class Clay_RenderCommand {

    Clay_RenderCommand() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clay_BoundingBox.layout().withName("boundingBox"),
        Clay_RenderData.layout().withName("renderData"),
        ClayFFM.C_POINTER.withName("userData"),
        ClayFFM.C_INT.withName("id"),
        ClayFFM.C_SHORT.withName("zIndex"),
        MemoryLayout.paddingLayout(2),
        ClayFFM.C_INT.withName("commandType"),
        MemoryLayout.paddingLayout(4)
    ).withName("Clay_RenderCommand");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout boundingBox$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("boundingBox"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_BoundingBox boundingBox
     * }
     */
    public static final GroupLayout boundingBox$layout() {
        return boundingBox$LAYOUT;
    }

    private static final long boundingBox$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_BoundingBox boundingBox
     * }
     */
    public static final long boundingBox$offset() {
        return boundingBox$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_BoundingBox boundingBox
     * }
     */
    public static MemorySegment boundingBox(MemorySegment struct) {
        return struct.asSlice(boundingBox$OFFSET, boundingBox$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_BoundingBox boundingBox
     * }
     */
    public static void boundingBox(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, boundingBox$OFFSET, boundingBox$LAYOUT.byteSize());
    }

    private static final GroupLayout renderData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("renderData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_RenderData renderData
     * }
     */
    public static final GroupLayout renderData$layout() {
        return renderData$LAYOUT;
    }

    private static final long renderData$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_RenderData renderData
     * }
     */
    public static final long renderData$offset() {
        return renderData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_RenderData renderData
     * }
     */
    public static MemorySegment renderData(MemorySegment struct) {
        return struct.asSlice(renderData$OFFSET, renderData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_RenderData renderData
     * }
     */
    public static void renderData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, renderData$OFFSET, renderData$LAYOUT.byteSize());
    }

    private static final AddressLayout userData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final AddressLayout userData$layout() {
        return userData$LAYOUT;
    }

    private static final long userData$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final long userData$offset() {
        return userData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static MemorySegment userData(MemorySegment struct) {
        return struct.get(userData$LAYOUT, userData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static void userData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userData$LAYOUT, userData$OFFSET, fieldValue);
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t id
     * }
     */
    public static final OfInt id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t id
     * }
     */
    public static int id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final OfShort zIndex$LAYOUT = (OfShort)$LAYOUT.select(groupElement("zIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t zIndex
     * }
     */
    public static final OfShort zIndex$layout() {
        return zIndex$LAYOUT;
    }

    private static final long zIndex$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t zIndex
     * }
     */
    public static final long zIndex$offset() {
        return zIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t zIndex
     * }
     */
    public static short zIndex(MemorySegment struct) {
        return struct.get(zIndex$LAYOUT, zIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t zIndex
     * }
     */
    public static void zIndex(MemorySegment struct, short fieldValue) {
        struct.set(zIndex$LAYOUT, zIndex$OFFSET, fieldValue);
    }

    private static final OfInt commandType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("commandType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_RenderCommandType commandType
     * }
     */
    public static final OfInt commandType$layout() {
        return commandType$LAYOUT;
    }

    private static final long commandType$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_RenderCommandType commandType
     * }
     */
    public static final long commandType$offset() {
        return commandType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_RenderCommandType commandType
     * }
     */
    public static int commandType(MemorySegment struct) {
        return struct.get(commandType$LAYOUT, commandType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_RenderCommandType commandType
     * }
     */
    public static void commandType(MemorySegment struct, int fieldValue) {
        struct.set(commandType$LAYOUT, commandType$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

