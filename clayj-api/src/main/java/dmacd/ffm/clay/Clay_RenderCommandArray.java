// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_RenderCommandArray {
 *     int32_t capacity;
 *     int32_t length;
 *     Clay_RenderCommand *internalArray;
 * }
 * }
 */
public class Clay_RenderCommandArray {

    Clay_RenderCommandArray() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ClayFFM.C_INT.withName("capacity"),
        ClayFFM.C_INT.withName("length"),
        ClayFFM.C_POINTER.withName("internalArray")
    ).withName("Clay_RenderCommandArray");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt capacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t capacity
     * }
     */
    public static final OfInt capacity$layout() {
        return capacity$LAYOUT;
    }

    private static final long capacity$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t capacity
     * }
     */
    public static final long capacity$offset() {
        return capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t capacity
     * }
     */
    public static int capacity(MemorySegment struct) {
        return struct.get(capacity$LAYOUT, capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t capacity
     * }
     */
    public static void capacity(MemorySegment struct, int fieldValue) {
        struct.set(capacity$LAYOUT, capacity$OFFSET, fieldValue);
    }

    private static final OfInt length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t length
     * }
     */
    public static final OfInt length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t length
     * }
     */
    public static int length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t length
     * }
     */
    public static void length(MemorySegment struct, int fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final AddressLayout internalArray$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("internalArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay_RenderCommand *internalArray
     * }
     */
    public static final AddressLayout internalArray$layout() {
        return internalArray$LAYOUT;
    }

    private static final long internalArray$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay_RenderCommand *internalArray
     * }
     */
    public static final long internalArray$offset() {
        return internalArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay_RenderCommand *internalArray
     * }
     */
    public static MemorySegment internalArray(MemorySegment struct) {
        return struct.get(internalArray$LAYOUT, internalArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay_RenderCommand *internalArray
     * }
     */
    public static void internalArray(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(internalArray$LAYOUT, internalArray$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

