// Generated by jextract

package dmacd.ffm.clay;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Clay_SizingAxis {
 *     union {
 *         Clay_SizingMinMax minMax;
 *         float percent;
 *     } size;
 *     Clay__SizingType type;
 * }
 * }
 */
public class Clay_SizingAxis {

    Clay_SizingAxis() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clay_SizingAxis.size.layout().withName("size"),
        ClayFFM.C_INT.withName("type")
    ).withName("Clay_SizingAxis");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * union {
     *     Clay_SizingMinMax minMax;
     *     float percent;
     * }
     * }
     */
    public static class size {

        size() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            Clay_SizingMinMax.layout().withName("minMax"),
            ClayFFM.C_FLOAT.withName("percent")
        ).withName("$anon$315:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout minMax$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("minMax"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Clay_SizingMinMax minMax
         * }
         */
        public static final GroupLayout minMax$layout() {
            return minMax$LAYOUT;
        }

        private static final long minMax$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Clay_SizingMinMax minMax
         * }
         */
        public static final long minMax$offset() {
            return minMax$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Clay_SizingMinMax minMax
         * }
         */
        public static MemorySegment minMax(MemorySegment union) {
            return union.asSlice(minMax$OFFSET, minMax$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Clay_SizingMinMax minMax
         * }
         */
        public static void minMax(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, minMax$OFFSET, minMax$LAYOUT.byteSize());
        }

        private static final OfFloat percent$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("percent"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * float percent
         * }
         */
        public static final OfFloat percent$layout() {
            return percent$LAYOUT;
        }

        private static final long percent$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * float percent
         * }
         */
        public static final long percent$offset() {
            return percent$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * float percent
         * }
         */
        public static float percent(MemorySegment union) {
            return union.get(percent$LAYOUT, percent$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * float percent
         * }
         */
        public static void percent(MemorySegment union, float fieldValue) {
            union.set(percent$LAYOUT, percent$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout size$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     Clay_SizingMinMax minMax;
     *     float percent;
     * } size
     * }
     */
    public static final GroupLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     Clay_SizingMinMax minMax;
     *     float percent;
     * } size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     Clay_SizingMinMax minMax;
     *     float percent;
     * } size
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.asSlice(size$OFFSET, size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     Clay_SizingMinMax minMax;
     *     float percent;
     * } size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, size$OFFSET, size$LAYOUT.byteSize());
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Clay__SizingType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Clay__SizingType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Clay__SizingType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Clay__SizingType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

